@page "/GamesList"
@using template.Shared.Models.Games
@inject HttpClient Http
@inject NavigationManager Nav
<link href="../css/site.css" rel="stylesheet" />
<link href="GamesList.razor.css" rel="stylesheet" />

<PageTitle>המשחקים שלי</PageTitle>

<h1>המשתמש שמחובר כעת: @UserId</h1>

<div class="button-container">
    <button class="btn btn-custom position-left" @onclick="NavigateToAddGame">
        <span class="button-content">
            <span class="plus">+</span> <span class="button-text">יצירת משחק חדש</span>
        </span>
    </button>
</div>

@if (MyGamesList != null)
{
    <div class="table-container">
        <div class="table-background">
            <div class="table-header">
                <span>שם המשחק</span>
                <span>קוד המשחק</span>
                <span>מספר שאלות</span>
                <span>עריכה</span>
                <span>מחיקה</span>
                <span>פרסום</span>
            </div>
            <div class="table-content">
                @foreach (GameToTable game in MyGamesList)
                {
                    <div class="table-row">
                        <span>@game.GameName</span>
                        <span>@game.GameCode</span>
                        <span>@game.NumQuestion</span>
                        <span>
                            <button @onclick="() => EditGame(game.ID)">עריכה</button>
                        </span>
                        <span>
                            <button @onclick="() => DeleteGame(game.ID)">מחיקה</button>
                        </span>
                        <span>
                            <label class="switch">
                                <input type="checkbox" checked="@game.IsPublish" @onchange="@(e => TogglePublish(game.ID, ((ChangeEventArgs)e).Value.ToString().ToLower() == "true"))" disabled="@(IsPublishDisabled(game.NumQuestion))" />
                                <span class="slider"></span>
                            </label>
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>
}
@if (msg != "")
{
    <p class="msg">@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}

@code {
    [CascadingParameter]
    public int UserId { get; set; }

    List<GameToTable> MyGamesList;
    string msg = "";

    protected override async Task OnInitializedAsync()
    {
        var gamesRes = await Http.GetAsync("api/games/");

        if (gamesRes.IsSuccessStatusCode)
        {
            MyGamesList = await gamesRes.Content.ReadFromJsonAsync<List<GameToTable>>();
        }
        else
        {
            string error = await gamesRes.Content.ReadAsStringAsync();
            ShowError(error);
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    void NavigateToAddGame()
    {
        Nav.NavigateTo("/AddGame");
    }

    void EditGame(int gameId)
    {
        Nav.NavigateTo($"/AddGame/{gameId}");
    }

    async Task DeleteGame(int gameId)
    {
        var response = await Http.DeleteAsync($"api/games/{gameId}");

        if (response.IsSuccessStatusCode)
        {
            MyGamesList = MyGamesList.Where(g => g.ID != gameId).ToList();
        }
        else
        {
            string error = await response.Content.ReadAsStringAsync();
            ShowError(error);
        }
    }

    async Task TogglePublish(int gameId, bool isPublish)
    {
        var response = await Http.PostAsJsonAsync("api/games/publishGame", new PublishGame { ID = gameId, IsPublish = isPublish });

        if (response.IsSuccessStatusCode)
        {
            var game = MyGamesList.FirstOrDefault(g => g.ID == gameId);
            if (game != null)
            {
                game.IsPublish = isPublish;
                game.CanPublish = isPublish;
            }
        }
        else
        {
            string error = await response.Content.ReadAsStringAsync();
            ShowError(error);
        }
    }

    bool IsPublishDisabled(int numQuestion)
    {
        return !(numQuestion >= 10 && numQuestion % 2 == 0);
    }

    void ShowError(string error)
    {
        switch (error)
        {
            case "No games for this user":
                msg = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
                break;
            case "user is not authenticated":
                msg = "ארעה בעיה בעת אימות המשתמש";
                break;
            case "Game not created":
                msg = "ארעה בעיה בעת יצירת המשחק";
                break;
            case "Game code not created":
                msg = "ארעה בעיה בעת יצירת קוד המשחק";
                break;
            case "This game cannot be published":
                msg = "המשחק אינו מאושר לפרסום";
                break;
            case "Update Failed":
                msg = "עדכון המשחק נכשל";
                break;
            case "It's Not Your Game":
                msg = "המשחק אינו שייך לך";
                break;
            case "Failed to create the new game":
                msg = "נכשל ביצירת המשחק החדש";
                break;
            default:
                msg = "שגיאה לא ידועה";
                break;
        }
    }
}
