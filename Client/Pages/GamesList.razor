@page "/GamesList/"
@using template.Shared.Models.Games
@inject HttpClient Http
@inject NavigationManager Nav


<PageTitle>המשחקים שלי</PageTitle>

<ImageWithText_EmptySign Text="המשחקים שלי" />

@* <h1 class="text-danger">המשתמש שמחובר כעת: @UserId</h1> *@

@if (MyGamesList != null)
{
    <span class="btn btn-create-new-game btn-red-custom" @onclick="NavigateToAddGame">
        + יצירת משחק חדש
    </span>

    <div class="table-container mt-3">
        <img src="/images/table-background.png" alt="Table Background"@*  class="w-100" *@ />

        <table class="table-header">
            <thead class="table">
                <tr>
                    <th style="width: 2%"></th>
                    <th>שם המשחק</th>
                    <th>קוד המשחק</th>
                    <th>מספר שאלות</th>
                    <th>עריכה</th>
                    <th>מחיקה</th>
                    <th>פרסום</th>
                </tr>
            </thead>
        </table>
        <div class="table-body table-responsive">
            <table class="table table-sm align-middle">
                <tbody>
                    @foreach (GameToTable game in MyGamesList)
                    {
                        <tr>
                            <td class="border-0" style="width: 2%"></td>
                            <td style="width: 20%">@game.GameName</td>
                            <td style="width: 19%">@game.GameCode</td>
                            <td style="width: 16%">@game.NumQuestion</td>
                            <td style="width: 18%" class="table-buttons">
                                <button class="google-icon material-symbols-outlined" @onclick="() => EditGame(game.ID)">
                                    edit
                                </button>
                            </td>
                            <td style="width: 17%" class="table-buttons">
                                <button class="google-icon material-symbols-outlined" @onclick="() => DeleteGame(game.ID)">
                                    delete
                                </button>
                            </td>
                            <td style="width: 18%" class="table-buttons">
                                <button class="publish-btn google-icon material-symbols-outlined" @onclick="() => TogglePublish(game.ID, !game.IsPublish)" disabled="@(IsPublishDisabled(game.NumQuestion))">
                                    @if (game.IsPublish)
                                    {
                                        <span class="material-symbols-outlined" style="">toggle_on</span>
                                    }
                                    else
                                    {
                                        <span class="material-symbols-outlined">toggle_off</span>
                                    }
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}


@if (msg != "")
{
    <p class="msg">@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}

@code {
    [CascadingParameter]
    public int UserId { get; set; }

    List<GameToTable> MyGamesList;
    string msg = "";

    protected override async Task OnInitializedAsync()
    {
        var gamesRes = await Http.GetAsync("api/games/");

        if (gamesRes.IsSuccessStatusCode)
        {
            MyGamesList = await gamesRes.Content.ReadFromJsonAsync<List<GameToTable>>();
        }
        else
        {
            string error = await gamesRes.Content.ReadAsStringAsync();
            ShowError(error);
        }
    }

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    void NavigateToAddGame()
    {
        Nav.NavigateTo("/AddGame");
    }

    void EditGame(int gameId)
    {
        Nav.NavigateTo($"/AddGame/{gameId}");
    }

    async Task DeleteGame(int gameId)
    {
        // אוסף את כל נתיבי התמונות הקשורות למשחק
        var imagePaths = await GetGameImagePaths(gameId);

        // מוחק את התמונות
        if (imagePaths.Any())
        {
            var deleteImagesResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", imagePaths);
            if (!deleteImagesResponse.IsSuccessStatusCode)
            {
                ShowError("Failed to delete game images");
                return;
            }
        }

        // מוחק את המשחק מהמסד נתונים
        var response = await Http.DeleteAsync($"api/games/{gameId}");

        if (response.IsSuccessStatusCode)
        {
            MyGamesList = MyGamesList.Where(g => g.ID != gameId).ToList();
        }
        else
        {
            string error = await response.Content.ReadAsStringAsync();
            ShowError(error);
        }
    }


    async Task TogglePublish(int gameId, bool isPublish)
    {
        var response = await Http.PostAsJsonAsync("api/games/publishGame", new PublishGame { ID = gameId, IsPublish = isPublish });

        if (response.IsSuccessStatusCode)
        {
            var game = MyGamesList.FirstOrDefault(g => g.ID == gameId);
            if (game != null)
            {
                game.IsPublish = isPublish;
                game.CanPublish = isPublish;
            }
        }
        else
        {
            string error = await response.Content.ReadAsStringAsync();
            ShowError(error);
        }
    }

    bool IsPublishDisabled(int numQuestion)
    {
        return !(numQuestion >= 10 && numQuestion % 2 == 0);
    }

    void ShowError(string error)
    {
        switch (error)
        {
            case "No games for this user":
                msg = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
                break;
            case "user is not authenticated":
                msg = "ארעה בעיה בעת אימות המשתמש";
                break;
            case "Game not created":
                msg = "ארעה בעיה בעת יצירת המשחק";
                break;
            case "Game code not created":
                msg = "ארעה בעיה בעת יצירת קוד המשחק";
                break;
            case "This game cannot be published":
                msg = "המשחק אינו מאושר לפרסום";
                break;
            case "Update Failed":
                msg = "עדכון המשחק נכשל";
                break;
            case "It's Not Your Game":
                msg = "המשחק אינו שייך לך";
                break;
            case "Failed to create the new game":
                msg = "נכשל ביצירת המשחק החדש";
                break;
            default:
                msg = "שגיאה לא ידועה";
                break;
        }
    }

    async Task<List<string>> GetGameImagePaths(int gameId)
    {
        var imagePaths = new List<string>();

        // מקבל את כל השאלות והתשובות של המשחק
        var response = await Http.GetAsync($"api/games/allQuestionsAndAnswers/{gameId}");
        if (response.IsSuccessStatusCode)
        {
            var questionsAndAnswers = await response.Content.ReadFromJsonAsync<List<QuestionDetailed>>();

            foreach (var question in questionsAndAnswers)
            {
                // מוסיף את תמונת השאלה אם קיימת
                if (!string.IsNullOrEmpty(question.QuestionsImage) && question.QuestionsImage != "DefaultName")
                {
                    imagePaths.Add(question.QuestionsImage);
                }

                // מוסיף את תמונות התשובות אם קיימות
                foreach (var answer in question.Answers)
                {
                    if (answer.IsPicture && !string.IsNullOrEmpty(answer.Content) && answer.Content != "DefaultName")
                    {
                        imagePaths.Add(answer.Content);
                    }
                }
            }
        }

        return imagePaths;
    }
}