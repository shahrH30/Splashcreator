@page "/AddGame/{gameId:int?}"

@using template.Shared.Models.Games
@inject HttpClient Http
@inject NavigationManager Nav

<PageTitle>הוספת משחק חדש</PageTitle>
<button @onclick="GoToHomePage">חזרה למשחקים שלי</button>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="gameToAdd" OnValidSubmit="CreateOrUpdateGame">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>שם המשחק:</label>
        <CustomInputText @bind-Value="gameToAdd.GameName"
                         maxLength="8"
                         minLength="2"
                         OnInput="SetUnsavedChanges" />
        <ValidationMessage For="@(() => gameToAdd.GameName)" />
    </div>

    <div>
        <label>זמן לשאלה (בשניות):</label>
        <div>
            <button type="button" class="@GetButtonClass(20)" @onclick="() => SetTimePerItem(20)">20 שניות</button>
            <button type="button" class="@GetButtonClass(30)" @onclick="() => SetTimePerItem(30)">30 שניות</button>
            <button type="button" class="@GetButtonClass(40)" @onclick="() => SetTimePerItem(40)">40 שניות</button>
            <button type="button" class="@GetButtonClass(0)" @onclick="() => SetTimePerItem(0)">ללא הגבלת זמן</button>
        </div>
        <ValidationMessage For="@(() => gameToAdd.TimeLimitPerQues)" />
    </div>

    <button type="submit">עדכון נתונים</button>
</EditForm>

@if (gameId.HasValue)
{
    <h3>@(isEditing ? "עריכת שאלה" : "הוספת שאלה")</h3>

    <EditForm Model="newQuestion" OnValidSubmit="HandleQuestionSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="questionText">טקסט השאלה</label>
            <CustomInputText @bind-Value="newQuestion.QuestionsText"
                             maxLength="100"
                             minLength="2"
                             OnInput="ValidateQuestionText" />
            <ValidationMessage For="@(() => newQuestion.QuestionsText)" />
        </div>
        <div class="form-group">
            <label for="questionImage">תמונת השאלה</label>
            @if (string.IsNullOrEmpty(newQuestion.QuestionsImage) || newQuestion.QuestionsImage == defaultImageName)
            {
                <InputFile id="questionImage" OnChange="UploadFile" />
                <label for="questionImage" class="btn btn-primary">הוסף תמונה</label>
            }
            else
            {
                <div>
                    <img src="@newQuestion.QuestionsImage" alt="תמונת השאלה" style="max-width: 200px;" />
                    <div>
                        <button type="button" @onclick="DeleteImage" class="btn btn-danger">מחק תמונה</button>
                        <InputFile id="editQuestionImage" OnChange="UploadFile" />
                        <label for="editQuestionImage" class="btn btn-secondary">ערוך תמונה</label>
                    </div>
                </div>
            }
            <ValidationMessage For="@(() => newQuestion.QuestionsImage)" />
        </div>

        <h3>הזנת תשובות:</h3>
        @foreach (var answer in answers)
        {
            <div class="answer-container">
                <input type="radio" name="correctAnswer" @onchange="() => SetCorrectAnswer(answer)" checked="@answer.IsCorrect" />
                <button type="button" @onclick="() => ToggleAnswerType(answer)">החלף לסוג תשובה</button>

                @if (answer.IsPicture)
                {
                    <InputFile OnChange="@((InputFileChangeEventArgs e) => HandleAnswerFileChange(e, answer))" />
                    @if (!string.IsNullOrEmpty(answer.Content))
                    {
                        <img src="@answer.Content" alt="תמונת התשובה" style="max-width: 100px;" />
                    }
                }
                else
                {
                    <CustomInputText @bind-Value="answer.Content" maxLength="35" minLength="2" />
                }

                <ValidationMessage For="@(() => answer.Content)" />
            </div>
        }
        @if (answers.Count < 6)
        {
            <button type="button" @onclick="AddAnswer">הוסף תשובה</button>
        }

        @if (isEditing)
        {
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">ביטול</button>
        }

        <button type="submit" class="btn btn-primary" disabled="@(!isQuestionValid)">
            @(isEditing ? "עדכן שאלה" : "הוסף שאלה")
        </button>
    </EditForm>

    <h3>שאלות קיימות</h3>
    @if (questions == null || !questions.Any())
    {
        <p>בואו נתחיל ליצור שאלות (מותר ליצור עד 26 שאלות).</p>
    }
    else
    {
        <p>שאלות קיימות: @questions.Count / 26</p>
        <table class="table">
            <thead>
                <tr>
                    <th>טקסט השאלה</th>
                    <th>כתובת תמונה</th>
                    <th>פעולות</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var question in questions)
                {
                    <tr>
                        <td>@question.QuestionsText</td>
                        <td>@question.QuestionsImage</td>
                        <td>
                            <button @onclick="() => EditQuestion(question)" class="btn btn-secondary">עריכה</button>
                            <button @onclick="() => DeleteQuestion(question.ID)" class="btn btn-danger">מחיקה</button>
                            <button @onclick="() => DuplicateQuestion(question.ID)" class="btn btn-primary">שכפול</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter] public int? gameId { get; set; }
    string successMessage;
    string errorMessage;
    GameToAdd gameToAdd = new GameToAdd();
    QuestionsUpdate newQuestion = new QuestionsUpdate();
    AnswerUpdate newAnswer = new AnswerUpdate();
    List<QuestionsUpdate> questions = new List<QuestionsUpdate>();
    bool hasUnsavedChanges = false;
    bool isQuestionValid = false;
    bool isAmswerValid = false;
    int selectedTime = 30; // הגדרת ברירת מחדל
    const long maxFileSize = 5242880; // 5MB
    const string defaultImageName = "DefaultImage.png";
    QuestionsUpdate editingQuestion = null;
    bool isEditing = false;
    List<AnswerUpdate> answers = new List<AnswerUpdate>
    {
        new AnswerUpdate { IsCorrect = false, IsPicture = false },
        new AnswerUpdate { IsCorrect = false, IsPicture = false }
    };

    protected override async Task OnInitializedAsync()
    {
        if (gameId.HasValue)
        {
            var game = await Http.GetFromJsonAsync<GameToAdd>("api/games/details/" + gameId);
            if (game != null)
            {
                gameToAdd.GameName = game.GameName;
                gameToAdd.TimeLimitPerQues = game.TimeLimitPerQues;
                selectedTime = game.TimeLimitPerQues;
                await LoadQuestions();
            }
        }
        gameToAdd.TimeLimitPerQues = selectedTime;
    }

    async Task LoadQuestions()
    {
        questions = await Http.GetFromJsonAsync<List<QuestionsUpdate>>($"api/questions/{gameId}");
    }

    async Task CreateOrUpdateGame()
    {
        if (ValidateGameName(gameToAdd.GameName) && ValidateTimeLimit())
        {
            HttpResponseMessage response;

            if (gameId.HasValue)
            {
                response = await Http.PutAsJsonAsync("api/games/updateGame/" + gameId, gameToAdd);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/games/addGame", gameToAdd);
                var responseContent = await response.Content.ReadFromJsonAsync<GameToTable>();
                if (responseContent != null)
                {
                    gameId = responseContent.ID;
                    Nav.NavigateTo($"/AddGame/{gameId}");
                }
            }

            if (response.IsSuccessStatusCode)
            {
                successMessage = "העדכון בוצע בהצלחה!";
                hasUnsavedChanges = false;
            }
            else
            {
                successMessage = "";
                string error = await response.Content.ReadAsStringAsync();
                ShowError(error);
            }
        }
    }


    private async Task HandleQuestionSubmit()
    {
        if (gameId.HasValue)
        {
            var questionWithAnswers = new QuestionWithAnswers
                {
                    QuestionId = newQuestion.ID,
                    Text = newQuestion.QuestionsText,
                    Image = newQuestion.QuestionsImage,
                    GameId = gameId.Value,
                    Answers = answers
                };

            HttpResponseMessage response;
            if (isEditing)
            {
                // השתמש ב-POST במקום PUT לעדכון
                response = await Http.PostAsJsonAsync($"api/questions/update/{editingQuestion.ID}", questionWithAnswers);
            }
            else
            {
                response = await Http.PostAsJsonAsync($"api/questions/{gameId}", questionWithAnswers);
            }

            if (response.IsSuccessStatusCode)
            {
                newQuestion = new QuestionsUpdate();
                answers = new List<AnswerUpdate>
            {
                new AnswerUpdate { IsCorrect = false, IsPicture = false },
                new AnswerUpdate { IsCorrect = false, IsPicture = false }
            };
                successMessage = isEditing ? "השאלה עודכנה בהצלחה!" : "השאלה נוספה בהצלחה!";
                await LoadQuestions();
                isQuestionValid = false;
                isEditing = false;
                editingQuestion = null;
            }
            else
            {
                errorMessage = isEditing
                    ? "ארעה בעיה בעת עדכון השאלה: " + await response.Content.ReadAsStringAsync()
                    : "ארעה בעיה בעת הוספת השאלה: " + await response.Content.ReadAsStringAsync();
            }
        }
        else
        {
            errorMessage = "אין מזהה משחק תקין.";
        }
    }


    async Task UpdateAnswers()
    {
        var response = await Http.PostAsJsonAsync("api/answers/update", answers);
        if (response.IsSuccessStatusCode)
        {
            successMessage = "התשובות עודכנו בהצלחה!";
        }
        else
        {
            errorMessage = "ארעה בעיה בעת עדכון התשובות.";
        }
    }

    void CancelEdit()
    {
        isEditing = false;
        editingQuestion = null;
        newQuestion = new QuestionsUpdate();
        isQuestionValid = false;
    }

    private async Task EditQuestion(QuestionsUpdate question)
    {
        var response = await Http.GetAsync($"api/questions/question/{question.ID}");
        if (response.IsSuccessStatusCode)
        {
            var questionWithAnswers = await response.Content.ReadFromJsonAsync<QuestionWithAnswers>();
            editingQuestion = new QuestionsUpdate
                {
                    ID = questionWithAnswers.QuestionId,
                    QuestionsText = questionWithAnswers.Text,
                    QuestionsImage = questionWithAnswers.Image,
                    GameID = questionWithAnswers.GameId
                };
            newQuestion = editingQuestion;
            answers = questionWithAnswers.Answers;
            isEditing = true;
            isQuestionValid = true;
        }
        else
        {
            errorMessage = "ארעה בעיה בטעינת השאלה והתשובות.";
        }
    }

    async Task DeleteQuestion(int id)
    {
        var response = await Http.DeleteAsync($"api/questions/{id}");
        if (response.IsSuccessStatusCode)
        {
            successMessage = "השאלה נמחקה בהצלחה!";
            await LoadQuestions();
        }
        else
        {
            errorMessage = "ארעה בעיה בעת מחיקת השאלה.";
        }
    }

    async Task DuplicateQuestion(int id)
    {
        var response = await Http.PostAsync($"api/questions/duplicate/{id}", null);
        if (response.IsSuccessStatusCode)
        {
            successMessage = "השאלה שוכפלה בהצלחה!";
            await LoadQuestions();
        }
        else
        {
            errorMessage = "ארעה בעיה בעת שכפול השאלה.";
        }
    }

    private void ValidateQuestionText(string text)
    {
        isQuestionValid = !string.IsNullOrEmpty(text) && text.Length >= 2;
    }

    private void ValidateAnswerText(string text)
    {
        isAmswerValid = !string.IsNullOrEmpty(text) && text.Length >= 2;
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        ClearMessages();
        var imageFile = e.File;
        if (imageFile.Size > maxFileSize)
        {
            errorMessage = "התמונה גדולה מידי";
            return;
        }
        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream(maxFileSize).ReadAsync(buffer);
        var imageBase64 = Convert.ToBase64String(buffer);
        var saveResponse = await Http.PostAsJsonAsync("api/Media/upload", imageBase64);
        if (saveResponse.IsSuccessStatusCode)
        {
            string imageName = await saveResponse.Content.ReadAsStringAsync();
            newQuestion.QuestionsImage = $"uploadedFiles/{imageName}";
            successMessage = "התמונה הועלתה בהצלחה";
            StateHasChanged();
        }
        else
        {
            errorMessage = await saveResponse.Content.ReadAsStringAsync();
        }
    }

    private async Task DeleteImage()
    {
        ClearMessages();
        if (string.IsNullOrEmpty(newQuestion.QuestionsImage) || newQuestion.QuestionsImage == defaultImageName)
        {
            errorMessage = "אין תמונה למחיקה";
            return;
        }

        string imageNameToDelete = Path.GetFileName(newQuestion.QuestionsImage);
        var deleteResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", new List<string> { imageNameToDelete });

        if (deleteResponse.IsSuccessStatusCode)
        {
            newQuestion.QuestionsImage = defaultImageName;
            successMessage = "התמונה נמחקה בהצלחה";
        }
        else
        {
            errorMessage = $"שגיאה במחיקת התמונה: {await deleteResponse.Content.ReadAsStringAsync()}";
        }
    }

    private void SetCorrectAnswer(AnswerUpdate answer)
    {
        foreach (var ans in answers)
        {
            ans.IsCorrect = false;
        }
        answer.IsCorrect = true;
    }

    private void ToggleAnswerType(AnswerUpdate answer)
    {
        answer.IsPicture = !answer.IsPicture;
        answer.Content = string.Empty;
    }

    private void AddAnswer()
    {
        if (answers.Count < 6)
        {
            answers.Add(new AnswerUpdate { IsCorrect = false, IsPicture = false });
        }
    }

    private async Task HandleAnswerFileChange(InputFileChangeEventArgs e, AnswerUpdate answer)
    {
        ClearMessages();
        var imageFile = e.File;
        if (imageFile.Size > maxFileSize)
        {
            errorMessage = "התמונה גדולה מידי";
            return;
        }
        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream(maxFileSize).ReadAsync(buffer);
        var imageBase64 = Convert.ToBase64String(buffer);
        var saveResponse = await Http.PostAsJsonAsync("api/Media/upload", imageBase64);
        if (saveResponse.IsSuccessStatusCode)
        {
            string imageName = await saveResponse.Content.ReadAsStringAsync();
            answer.Content = $"uploadedFiles/{imageName}";
            successMessage = "התמונה הועלתה בהצלחה";
            StateHasChanged();
        }
        else
        {
            errorMessage = await saveResponse.Content.ReadAsStringAsync();
        }
    }

    private void SetTimePerItem(int time)
    {
        gameToAdd.TimeLimitPerQues = time;
        selectedTime = time;
        SetUnsavedChanges("");
    }

    private void SetUnsavedChanges(string value)
    {
        hasUnsavedChanges = true;
    }

    private bool ValidateGameName(string gameName)
    {
        if (string.IsNullOrWhiteSpace(gameName) || gameName.StartsWith(" "))
        {
            gameToAdd.GameName = "";
            return false;
        }
        return true;
    }

    private bool ValidateTimeLimit()
    {
        return gameToAdd.TimeLimitPerQues >= 0;
    }

    void ShowError(string error)
    {
        switch (error)
        {
            case "No games for this user":
                successMessage = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
                break;
            case "user is not authenticated":
                successMessage = "ארעה בעיה בעת אימות המשתמש";
                break;
            case "Game not created":
                successMessage = "ארעה בעיה בעת יצירת המשחק";
                break;
            case "Game code not created":
                successMessage = "ארעה בעיה בעת יצירת קוד המשחק";
                break;
        }
    }

    private string GetButtonClass(int time)
    {
        return selectedTime == time ? "selected" : string.Empty;
    }

    private void GoToHomePage()
    {
        Nav.NavigateTo("/GamesList");
    }

    private void ClearMessages()
    {
        errorMessage = "";
        successMessage = "";
    }
}