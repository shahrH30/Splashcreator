@page "/AddGame/{gameId:int?}"

@using template.Shared.Models.Games
@inject HttpClient Http
@inject NavigationManager Nav

<PageTitle>הוספת משחק חדש</PageTitle>
<button @onclick="GoToHomePage">חזרה למשחקים שלי</button>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

<EditForm Model="gameToAdd" OnValidSubmit="CreateOrUpdateGame">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>שם המשחק:</label>
        <CustomInputText @bind-Value="gameToAdd.GameName"
                         maxLength="8"
                         minLength="2"
                         @oninput="SetUnsavedChanges" />

        <ValidationMessage For="@(() => gameToAdd.GameName)" />
    </div>

    <div>
        <label>זמן לשאלה (בשניות):</label>
        <div>
            <button type="button" class="@GetButtonClass(20)" @onclick="() => SetTimePerItem(20)">20 שניות</button>
            <button type="button" class="@GetButtonClass(30)" @onclick="() => SetTimePerItem(30)">30 שניות</button>
            <button type="button" class="@GetButtonClass(40)" @onclick="() => SetTimePerItem(40)">40 שניות</button>
            <button type="button" class="@GetButtonClass(0)" @onclick="() => SetTimePerItem(0)">ללא הגבלת זמן</button>
        </div>
        <ValidationMessage For="@(() => gameToAdd.TimeLimitPerQues)" />
    </div>

    <button type="submit">עדכון נתונים</button>
</EditForm>

@code {
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public int? gameId { get; set; }
    string successMessage;
    GameToAdd gameToAdd = new GameToAdd();
    bool hasUnsavedChanges = false;
    int selectedTime = 30; // הגדרת ברירת מחדל

    protected override async Task OnInitializedAsync()
    {
        if (gameId.HasValue)
        {
            var game = await Http.GetFromJsonAsync<GameToAdd>("api/games/details/" + gameId);
            if (game != null)
            {
                gameToAdd.GameName = game.GameName;
                gameToAdd.TimeLimitPerQues = game.TimeLimitPerQues;
                selectedTime = game.TimeLimitPerQues;
            }
        }
        gameToAdd.TimeLimitPerQues = selectedTime;
    }

    async Task CreateOrUpdateGame()
    {
        if (ValidateGameName(gameToAdd.GameName) && ValidateTimeLimit())
        {
            HttpResponseMessage response;

            if (gameId.HasValue)
            {
                response = await Http.PutAsJsonAsync("api/games/updateGame/" + gameId, gameToAdd);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/games/addGame", gameToAdd);
            }

            if (response.IsSuccessStatusCode)
            {
                successMessage = "העדכון בוצע בהצלחה!";
                hasUnsavedChanges = false;
            }
            else
            {
                successMessage = "";
                string error = await response.Content.ReadAsStringAsync();
                ShowError(error);
            }
        }
    }

    private void SetTimePerItem(int time)
    {
        gameToAdd.TimeLimitPerQues = time;
        selectedTime = time;
        SetUnsavedChanges();
    }

    private void SetUnsavedChanges()
    {
        hasUnsavedChanges = true;
    }

    private bool ValidateGameName(string gameName)
    {
        if (string.IsNullOrWhiteSpace(gameName) || gameName.StartsWith(" "))
        {
            gameToAdd.GameName = ""; // Clear invalid input
            return false;
        }
        return true;
    }

    private bool ValidateTimeLimit()
    {
        if (gameToAdd.TimeLimitPerQues < 0)
        {
            return false;
        }
        return true;
    }

    void ShowError(string error)
    {
        switch (error)
        {
            case "No games for this user":
                successMessage = "עדין לא יצרת משחקים... זה הזמן ליצור את הראשון :)";
                break;
            case "user is not authenticated":
                successMessage = "ארעה בעיה בעת אימות המשתמש";
                break;
            case "Game not created":
                successMessage = "ארעה בעיה בעת יצירת המשחק";
                break;
            case "Game code not created":
                successMessage = "ארעה בעיה בעת יצירת קוד המשחק";
                break;
        }
    }

    private string GetButtonClass(int time)
    {
        return selectedTime == time ? "selected" : string.Empty;
    }

    private void GoToHomePage()
    {
        Nav.NavigateTo("/GamesList");
    }
}

<style>
    .selected {
        background-color: #007bff;
        color: white;
        border: none;
    }

    button {
        margin: 5px;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f8f9fa;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        button:hover {
            background-color: #e2e6ea;
        }

    .alert-success {
        color: green;
        font-weight: bold;
    }
</style>
